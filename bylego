local Camera = workspace.CurrentCamera
local Holding = false



local targetList = {}

local function GetPriority(player)
    if settings.TargetPriority == "Health" then
        return player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health or 0
    elseif settings.TargetPriority == "Distance" then
        return (LocalPlayer.Character.Head.Position - player.Character[settings.AimPart].Position).Magnitude
    else
        return 0
    end
end

local function IsInFOV(target)
    if settings.FOV == 0 then
        return true
    end

    local mouseVector = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
    local targetVector, onScreen = Camera:WorldToScreenPoint(target.Character[settings.AimPart].Position)
    if not onScreen then
        return false
    end

    local angle = math.deg(math.atan2(mouseVector.Y - targetVector.Y, mouseVector.X - targetVector.X))
    local fovX = math.abs(angle)

    return fovX <= settings.FOV / 2
end

local function IsObstructed(origin, target)
    local ray = Ray.new(origin, (target - origin).unit * settings.MaximumDistance)
    local hit, position = workspace:FindPartOnRay(ray, LocalPlayer.Character, false, true)
    return hit and hit:IsA("Terrain") == false
end

local function GetClosestPlayer()
    local MaximumDistance = settings.MaximumDistance
    local Target = nil

    coroutine.wrap(function()
        wait(20)
        MaximumDistance = settings.MaximumDistance
    end)()

    for _, v in pairs(Players:GetPlayers()) do
        if v.Name ~= LocalPlayer.Name and (not settings.TeamCheck or v.Team ~= LocalPlayer.Team) then
            local character = v.Character
            if character and character:FindFirstChild("HumanoidRootPart") and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
                local humanoidRootPart = character.HumanoidRootPart
                local ScreenPoint = Camera:WorldToScreenPoint(humanoidRootPart.Position)
                local VectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude

                if VectorDistance < MaximumDistance and IsInFOV(v) and (not Target or GetPriority(v) < GetPriority(Target)) then
                    local targetPartPosition = humanoidRootPart.Position

                    if not IsObstructed(Camera.CFrame.Position, targetPartPosition) then
                        Target = v
                    end
                end
            end
        end
    end

    return Target
end

local function AddTarget(target)
    table.insert(targetList, target)
end

local function RemoveTarget(target)
    for i, v in ipairs(targetList) do
        if v == target then
            table.remove(targetList, i)
            break
        end
    end
end

UserInputService.InputBegan:Connect(function(Input)
    if Input.UserInputType == Enum.UserInputType.MouseButton2 then
        Holding = true
    end
end)

UserInputService.InputEnded:Connect(function(Input)
    if Input.UserInputType == Enum.UserInputType.MouseButton2 then
        Holding = false
    end
end)


RunService.RenderStepped:Connect(function()
    if Holding and AimbotToggle and settings.AimbotEnabled then
        local target = GetClosestPlayer()
        if target and target.Character and target.Character[settings.AimPart] then
            local targetPartPosition = target.Character[settings.AimPart].Position
            local newCFrame = CFrame.new(Camera.CFrame.Position, targetPartPosition)

            if settings.SilentMode then
                Camera.CFrame = newCFrame
            else
                TweenService:Create(Camera, TweenInfo.new(settings.Sensitivity / 10, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = newCFrame}):Play()
            end

            if settings.Shoot then
                game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Tool"):Activate()
            end
        end
    end
end)
